// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// LPM
NumericVector LPM(const double& degree, const RObject& target, const RObject& variable);
RcppExport SEXP _NNS_LPM(SEXP degreeSEXP, SEXP targetSEXP, SEXP variableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type variable(variableSEXP);
    rcpp_result_gen = Rcpp::wrap(LPM(degree, target, variable));
    return rcpp_result_gen;
END_RCPP
}
// UPM
NumericVector UPM(const double& degree, const RObject& target, const RObject& variable);
RcppExport SEXP _NNS_UPM(SEXP degreeSEXP, SEXP targetSEXP, SEXP variableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type variable(variableSEXP);
    rcpp_result_gen = Rcpp::wrap(UPM(degree, target, variable));
    return rcpp_result_gen;
END_RCPP
}
// CoLPM
NumericVector CoLPM(const double& degree_lpm, const RObject& x, const RObject& y, const RObject& target_x, const RObject& target_y);
RcppExport SEXP _NNS_CoLPM(SEXP degree_lpmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP target_xSEXP, SEXP target_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree_lpm(degree_lpmSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_x(target_xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_y(target_ySEXP);
    rcpp_result_gen = Rcpp::wrap(CoLPM(degree_lpm, x, y, target_x, target_y));
    return rcpp_result_gen;
END_RCPP
}
// CoUPM
NumericVector CoUPM(const double& degree_upm, const RObject& x, const RObject& y, const RObject& target_x, const RObject& target_y);
RcppExport SEXP _NNS_CoUPM(SEXP degree_upmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP target_xSEXP, SEXP target_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree_upm(degree_upmSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_x(target_xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_y(target_ySEXP);
    rcpp_result_gen = Rcpp::wrap(CoUPM(degree_upm, x, y, target_x, target_y));
    return rcpp_result_gen;
END_RCPP
}
// DLPM
NumericVector DLPM(const double& degree_lpm, const double& degree_upm, const RObject& x, const RObject& y, const RObject& target_x, const RObject& target_y);
RcppExport SEXP _NNS_DLPM(SEXP degree_lpmSEXP, SEXP degree_upmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP target_xSEXP, SEXP target_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree_lpm(degree_lpmSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree_upm(degree_upmSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_x(target_xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_y(target_ySEXP);
    rcpp_result_gen = Rcpp::wrap(DLPM(degree_lpm, degree_upm, x, y, target_x, target_y));
    return rcpp_result_gen;
END_RCPP
}
// DUPM
NumericVector DUPM(const double& degree_lpm, const double& degree_upm, const RObject& x, const RObject& y, const RObject& target_x, const RObject& target_y);
RcppExport SEXP _NNS_DUPM(SEXP degree_lpmSEXP, SEXP degree_upmSEXP, SEXP xSEXP, SEXP ySEXP, SEXP target_xSEXP, SEXP target_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree_lpm(degree_lpmSEXP);
    Rcpp::traits::input_parameter< const double& >::type degree_upm(degree_upmSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_x(target_xSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target_y(target_ySEXP);
    rcpp_result_gen = Rcpp::wrap(DUPM(degree_lpm, degree_upm, x, y, target_x, target_y));
    return rcpp_result_gen;
END_RCPP
}
// PMMatrix
List PMMatrix(const double& LPM_degree, const double& UPM_degree, const RObject& target, const RObject& variable, const bool pop_adj);
RcppExport SEXP _NNS_PMMatrix(SEXP LPM_degreeSEXP, SEXP UPM_degreeSEXP, SEXP targetSEXP, SEXP variableSEXP, SEXP pop_adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type LPM_degree(LPM_degreeSEXP);
    Rcpp::traits::input_parameter< const double& >::type UPM_degree(UPM_degreeSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const bool >::type pop_adj(pop_adjSEXP);
    rcpp_result_gen = Rcpp::wrap(PMMatrix(LPM_degree, UPM_degree, target, variable, pop_adj));
    return rcpp_result_gen;
END_RCPP
}
// LPM_ratio
NumericVector LPM_ratio(const double& degree, const RObject& target, const RObject& variable);
RcppExport SEXP _NNS_LPM_ratio(SEXP degreeSEXP, SEXP targetSEXP, SEXP variableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type variable(variableSEXP);
    rcpp_result_gen = Rcpp::wrap(LPM_ratio(degree, target, variable));
    return rcpp_result_gen;
END_RCPP
}
// UPM_ratio
NumericVector UPM_ratio(const double& degree, const RObject& target, const RObject& variable);
RcppExport SEXP _NNS_UPM_ratio(SEXP degreeSEXP, SEXP targetSEXP, SEXP variableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const double& >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type variable(variableSEXP);
    rcpp_result_gen = Rcpp::wrap(UPM_ratio(degree, target, variable));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NNS_LPM", (DL_FUNC) &_NNS_LPM, 3},
    {"_NNS_UPM", (DL_FUNC) &_NNS_UPM, 3},
    {"_NNS_CoLPM", (DL_FUNC) &_NNS_CoLPM, 5},
    {"_NNS_CoUPM", (DL_FUNC) &_NNS_CoUPM, 5},
    {"_NNS_DLPM", (DL_FUNC) &_NNS_DLPM, 6},
    {"_NNS_DUPM", (DL_FUNC) &_NNS_DUPM, 6},
    {"_NNS_PMMatrix", (DL_FUNC) &_NNS_PMMatrix, 5},
    {"_NNS_LPM_ratio", (DL_FUNC) &_NNS_LPM_ratio, 3},
    {"_NNS_UPM_ratio", (DL_FUNC) &_NNS_UPM_ratio, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_NNS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
